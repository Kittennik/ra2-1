{"version":3,"sources":["components/ProjectList.js","components/Toolbar.js","components/Portfolio.js","App.js","serviceWorker.js","index.js"],"names":["ProjectList","props","projects","projectColumn","lengthArr","Math","round","length","i","push","slice","console","log","className","map","o","a","src","img","alt","Toolbar","filters","selected","onSelectFilter","e","target","innerText","filter","onClick","Portfolio","useState","selectedFilter","selectFilter","prof","category","project","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8OAEe,SAASA,EAAYC,GAKlC,IAL0C,IAClCC,EAAaD,EAAbC,SACFC,EAAgB,GAEhBC,EAAYC,KAAKC,MAAMJ,EAASK,OADtB,GAEPC,EAAI,EAAGA,EAFA,EAEaA,GAAK,EAChCL,EAAcM,KAAKP,EAASQ,MAAMN,EAAYI,EAAGJ,GAAaI,EAAI,KAKpE,OAFAG,QAAQC,IAAIT,GAGV,yBAAKU,UAAU,gBACZV,EAAcW,KAAI,SAAAC,GAAC,OAAI,yBAAKF,UAAU,UACpCE,EAAED,KAAI,SAAAE,GAAC,OAAI,yBAAKC,IAAKD,EAAEE,IAAKC,IAAI,cCd1B,SAASC,EAAQnB,GAAQ,IAC9BoB,EAAsBpB,EAAtBoB,QAASC,EAAarB,EAAbqB,SACXC,EAAiB,SAACC,GACtBvB,EAAMsB,eAAeC,EAAEC,OAAOC,YAGhC,OADFf,QAAQC,IAAIX,GAER,yBAAKY,UAAU,UACZQ,EAAQP,KAAI,SAAAa,GACX,OAAO,yBAAKC,QAASL,EAAgBV,UAAWc,IAAWL,GAAY,UAAWK,OCP3E,SAASE,IACtB,IADkC,EAEKC,mBAAS,OAFd,mBAE3BC,EAF2B,KAEXC,EAFW,KAwD5BC,EArDc,CAAC,CACnBf,IAAK,wGACLgB,SAAU,kBACT,CACDhB,IAAK,wGACLgB,SAAU,YACT,CACDhB,IAAK,6GACLgB,SAAU,YACT,CACDhB,IAAK,gHACLgB,SAAU,YACT,CACDhB,IAAK,iHACLgB,SAAU,kBACT,CACDhB,IAAK,iHACLgB,SAAU,YACT,CACDhB,IAAK,wGACLgB,SAAU,YACT,CACDhB,IAAK,iHACLgB,SAAU,kBACT,CACDhB,IAAK,mHACLgB,SAAU,YACT,CACDhB,IAAK,mHACLgB,SAAU,WACT,CACDhB,IAAK,sHACLgB,SAAU,YACT,CACDhB,IAAK,wGACLgB,SAAU,kBACT,CACDhB,IAAK,qHACLgB,SAAU,YACT,CACDhB,IAAK,6GACLgB,SAAU,YACT,CACDhB,IAAK,iHACLgB,SAAU,kBACT,CACDhB,IAAK,uHACLgB,SAAU,YACT,CACDhB,IAAK,mHACLgB,SAAU,YAGaP,QAAO,SAAAQ,GAC9B,MAAuB,QAAnBJ,GAGGI,EAAQD,WAAaH,KAG9B,OACE,6BACE,kBAACX,EAAD,CACEC,QAjEU,CAAC,MAAO,WAAY,UAAW,kBAkEzCC,SAAUS,EACVR,eAAgB,SAACI,GACfK,EAAaL,MAGjB,kBAAC3B,EAAD,CAAaE,SAAU+B,KChEdG,MARf,WACE,OACE,yBAAKvB,UAAU,aACX,kBAACgB,EAAD,QCKYQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,c","file":"static/js/main.8e00291f.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function ProjectList(props) {\n  const { projects } = props;\n  const projectColumn = [];\n  const columns = 3;\n  const lengthArr = Math.round(projects.length / columns);\n  for (let i = 0; i < columns; i += 1) {\n    projectColumn.push(projects.slice(lengthArr * i, lengthArr * (i + 1)));\n  }\n\n  console.log(projectColumn);\n\n  return (\n    <div className=\"project-list\">\n      {projectColumn.map(o => <div className=\"column\">\n        {o.map(a => <img src={a.img} alt=\"1\"/>)}\n      </div>)}\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function Toolbar(props) {\n  const { filters, selected } = props;\n  const onSelectFilter = (e) => {\n    props.onSelectFilter(e.target.innerText);\n  };\nconsole.log(props);\n  return (\n    <div className=\"filter\">\n      {filters.map(filter => {\n        return <div onClick={onSelectFilter} className={filter === selected && \"active\"}>{filter}</div>\n      })}\n    </div>\n  )\n}\n","import React, { useState } from 'react';\nimport ProjectList from './ProjectList';\nimport Toolbar from './Toolbar';\n\nexport default function Portfolio() {\n  const filters = [\"All\", \"Websites\", \"Flayers\", \"Business Cards\"];\n  const [selectedFilter, selectFilter] = useState('All');\n  const allProjects = [{\n    img: \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/filter/img/mon.jpg\",\n    category: \"Business Cards\"\n  }, {\n    img: \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/filter/img/200.jpg\",\n    category: \"Websites\"\n  }, {\n    img: \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/filter/img/emi_haze.jpg\",\n    category: \"Websites\"\n  }, {\n    img: \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/filter/img/codystretch.jpg\",\n    category: \"Websites\"\n  }, {\n    img: \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/filter/img/Triangle_003.jpg\",\n    category: \"Business Cards\"\n  }, {\n    img: \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/filter/img/place200x290.png\",\n    category: \"Websites\"\n  }, {\n    img: \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/filter/img/200.jpg\",\n    category: \"Websites\"\n  }, {\n    img: \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/filter/img/transmission.jpg\",\n    category: \"Business Cards\"\n  }, {\n    img: \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/filter/img/place200x290_1.png\",\n    category: \"Websites\"\n  }, {\n    img: \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/filter/img/place200x290_2.png\",\n    category: \"Flayers\"\n  }, {\n    img: \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/filter/img/the_ninetys_brand.jpg\",\n    category: \"Websites\"\n  }, {\n    img: \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/filter/img/dia.jpg\",\n    category: \"Business Cards\"\n  }, {\n    img: \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/filter/img/Triangle_350x197.jpg\",\n    category: \"Websites\"\n  }, {\n    img: \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/filter/img/emi_haze.jpg\",\n    category: \"Websites\"\n  }, {\n    img: \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/filter/img/transmission.jpg\",\n    category: \"Business Cards\"\n  }, {\n    img: \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/filter/img/Triangle_350x197_1.jpg\",\n    category: \"Websites\"\n  }, {\n    img: \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/filter/img/place200x290_3.png\",\n    category: \"Flayers\"\n  }];\n  \n  const prof = allProjects.filter(project => {\n    if (selectedFilter === 'All') {\n      return true;\n    }\n    return project.category === selectedFilter;\n  });\n\n  return (\n    <div>\n      <Toolbar\n        filters={filters}\n        selected={selectedFilter}\n        onSelectFilter={(filter) => {\n          selectFilter(filter);\n        }}\n      />\n      <ProjectList projects={prof}/>\n    </div>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport Portfolio from './components/Portfolio';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n        <Portfolio />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}